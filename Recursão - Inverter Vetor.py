# -*- coding: utf-8 -*-
"""Recursão - Inverter Vetor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i0Ulp-lmj0fKVGZX1sgn8UToV2hXhUZN
"""

# depos que pesquisei vi que tinha uma solução que fazia com metade dos meus passos , mas vou apresentar minha solução , que  não é a melhor 
x = input().split()

novo_vetor = [] # esse aqui é um vetor que não tem nada
def inverter(vetor,posicao_inicial = 0):
  global novo_vetor # vamos modificalo globalmente
  if posicao_inicial >= len(vetor):   # pecorrer todo vetor de 0 até o final
     return
  inverter(vetor,posicao_inicial+1)   # Aponta para função mantendo o mesmo vetor , mas a posicao diferente 
  novo_vetor.append(int(vetor[posicao_inicial]))   # aplica o metodo append (adcionar a lista , no ultimo espaço) a função apontada  

inverter(x)
print(novo_vetor)

 # ele quer os que os numeros sejam inteiros e não strings